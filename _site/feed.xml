<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LawooTrip</title>
    <description>龟龟的个人博客</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 30 Mar 2017 13:01:06 +0000</pubDate>
    <lastBuildDate>Thu, 30 Mar 2017 13:01:06 +0000</lastBuildDate>
    <generator>Jekyll v3.4.0</generator>
    
      <item>
        <title>美国《消费者报告》简史</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;CR知多少&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;几百年前很少有人因选东西而烦恼，产品种类少，构造简单，短时间上手就能判断好坏。近代科学技术的爆发改变了一切。企业和品牌喷涌而出，商品市场如雨林般繁复，很多产品的微妙区别已经超出普通人的辨识范围。&lt;/p&gt;

&lt;p&gt;选购之时我们常说这个好、那个坏，产品好坏究竟指什么？性能、安全性、可靠性，还是多种指标的综合？如果是性能，有哪些指标，哪个是核心指标？如果是可靠性，用什么来衡量？&lt;/p&gt;

&lt;p&gt;当你想要了解商品知识时，离你最近的是喧嚣的媒体和广告——请仔细思量：广告是什么？广告是企业发明出来蛊惑人心的玩意儿，绝大部分混杂着诡计和套路。对选购来说，它们是迷宫，是泥沼，是错误的路标。&lt;/p&gt;

&lt;p&gt;然而在很长一段时间里，人们只能以流言和广告为基础，凭感觉进行选购。面对狡猾的企业，绝大部分消费者像猴子一样无知。&lt;/p&gt;

&lt;p&gt;直到二十世纪初，形势才稍有改善。当时的美国，强国气象已现，新玩意儿层出不穷，少数人不甘心被大众媒体愚弄，一种组织应运而生。&lt;/p&gt;

&lt;p&gt;1927 年，消费者历史上一本重要的书诞生了：《Your Money’s Worth》，作者便是日后消费者运动的两员大将：Frederick J. Schlink（富理德里克·J·施林克） 和 Stuart Chase（斯图尔特·蔡斯） 。
&lt;img src=&quot;http://image.lawootrip.com/2017-02-27-consumer-reports-history-2.png&quot; alt=&quot;2&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;《Your Money’s Worth》封面，来源：raretradingbooks&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;这本书详细介绍了食品、医药、汽车、家电等领域的诡计陷阱和过度广告。大获成功之后，施林克和斯图尔特趁热打铁创立了 Consumer Club（消费者俱乐部），经过两年的呼吁和准备， 1929 年又成立了 Consumers Research（消费者研究）。
&lt;img src=&quot;http://image.lawootrip.com/2017-02-27-consumer-reports-history-3.png&quot; alt=&quot;3&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;施林克和消费者研究实验室，来源：consumersresearch.org&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;这是一个什么样的组织？它致力于测试各式产品，发布商品指南，指导人们选购。&lt;/p&gt;

&lt;p&gt;它是一个非营利性组织，也是世界上第一个消费者组织。自此之后，消费者组织在美国和世界各地陆续出现，并由消费者研究确立了两大原则：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;独立于企业，不接受企业送测和资助。&lt;/li&gt;
  &lt;li&gt;无商业广告，资金主要来自消费者订阅和捐赠。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;到了 1933 年，消费者研究已经有了 42000 名订阅者，但没过多久，消费者运动历史上最大的转折出现了。&lt;/p&gt;

&lt;p&gt;1933 年， 施林克决定把总部从纽约搬到华盛顿乡村，这一举动引发了不满。因工作时间长、工资低，几名员工要求加薪，但被施林克立刻拒绝。1935 年，三名员工组建了工会，施林克知道后炒了他们。此举激怒了众人，大家决定罢工，要求恢复解聘者职位并提高工资。&lt;/p&gt;

&lt;p&gt;施林克怎么回应？他拒绝调解和仲裁，雇人进行报复，还指控罢工者是共产主义者。这实在是一件很讽刺的事情，一个号称维护公共利益的组织，却掉过头来对付自己的员工。&lt;/p&gt;

&lt;p&gt;罢工者和支持者们都很愤怒，遂决定另起炉灶。1936 年，在 Arthur Kallet（阿瑟·卡莱特）、Colston Warne（科尔斯顿·沃恩）等人的带领下， Consumers Union（消费者联盟）成立了，并出版一份叫 Consumers Union Reports（消费者联盟报告）的杂志 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/2017-02-27-consumer-reports-history-4.png&quot; alt=&quot;4&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;左为阿瑟·卡莱特，右为科尔斯顿·沃恩，来源：Consumer Reports - Kevin P. Manion&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;此时的消费者联盟报告，就是日后消费者运动中神祇一般的存在——Consumer Reports（消费者报告）。（PS：下文统称为 CR）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/2017-02-27-consumer-reports-history-5.png&quot; alt=&quot;5&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;1936 年 5 月，第一期 CR 出版，评测了肥皂、丝袜、牛奶等产品，来源：consumerreports.org&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;CR 从一诞生就受到多方夹击：&lt;/p&gt;

&lt;p&gt;一面是同行的抵制， 曾有 60 多种出版物拒绝刊登 CR 的募捐广告。 Reader’s Digest （读者文摘） 认为 CR 想给经济体系抹黑，Good Housekeeping（好管家） 谴责 CR 通过打破大众对广告组织的信任，延长了大萧条（PS：当时大萧条刚结束不久）。&lt;/p&gt;

&lt;p&gt;一面是消费者研究的打压，施林克不断指控消费者联盟是共产主义组织，终于在 1939 年，消费者联盟被 HUAC（非美活动调查委员会）列入 Subversive Organizations（颠覆性组织）名单，直到 1954 年才从名单中去除。&lt;/p&gt;

&lt;p&gt;最初，CR 的订阅量只有 4000，到了1936 年底，订阅量已经超过了 37000 。由于资金短缺，早期只能评测牛奶、丝袜、热水瓶、收音机、风扇等等便宜货。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/2017-02-27-consumer-reports-history-6.png&quot; alt=&quot;6&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;30年代，CR探讨了过度广告、维生素过度补充、吸烟危害等问题，来源：consumerreports.org&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;今人或许难以想象，二十世纪初的美国，避孕用品仍被视为「淫秽物品」， 1873 年通过的禁止淫秽作品和不道德物品的《康斯托克法》，在当时仍然有效。&lt;/p&gt;

&lt;p&gt;1937 年 ，CR 出版了《避孕用品报告》，却被邮局告知禁止寄送。CR 随即把邮局告上法庭，历时七年，法院最终否决了该禁令。&lt;/p&gt;

&lt;p&gt;1939 年，CR 的订阅量达到到 85000，然而第二次世界大战改变了一切。战争时期，制造业集中生产军用品，民众对评测的需求变小，市面上也没多少商品可供评测。&lt;/p&gt;

&lt;p&gt;到 1942 年 ，CR 的订阅量下滑到 1939 年的一半。这一年，Consumers Union Reports（消费者联盟报告）改名为 Consumer Reports（消费者报告）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/2017-02-27-consumer-reports-history-7.png&quot; alt=&quot;7&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;上世纪 40 年代，CR 批评利用战时产品短缺谋取高利的企业，揭露无用的「科学」助眠产品，并在战后给出汽车选购建议，来源：consumerreports.org&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;二战结束，人们继续买买买， CR 迎来大发展。1946 年的订阅量达到 10  万，1950 年，订阅量到达 40 万。&lt;/p&gt;

&lt;p&gt;1947 年，CR 测试了自动洗衣机，1952 年，发布第一份汽车维修频率表，1954 年，发布第一份彩色电视评测，1958 年，抨击用低电压刺激肌肉的减肥产品。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/2017-02-27-consumer-reports-history-8.png&quot; alt=&quot;8&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;上世纪 50 年代，CR 呼吁安全带应当成为汽车标配，来源：consumerreports.orgg&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;1954 年，CR 董事会决定把总部从纽约市搬到纽约州弗农山，办公室和试验室得以扩大，并添置了新的测试设备。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/2017-02-27-consumer-reports-history-9.png&quot; alt=&quot;9&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;1954 年，CR 迁到新总部，来源：Consumer Reports - Kevin P. Manion&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;迁到新家之后，CR 决定不再只是评测商品，开始更多介入消费者相关的事务。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/2017-02-27-consumer-reports-history-10.png&quot; alt=&quot;10&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;1954 年，读者参观 CR 的实验室，来源：Consumer Reports - Kevin P. Manion&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;50 年代末，CR 的实力更加强大，开始向其他消费者组织援助，并致力于领导世界范围内的消费者运动，协助成立了 IOCU（国际消费者联盟），即现在的 CI（国际消费者协会）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/2017-02-27-consumer-reports-history-11.png&quot; alt=&quot;11&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;1960 年，IOCU 成立，来源：Consumer Reports - Kevin P. Manion&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;在 50 年代末 60 年代初，CR 进行了几项核试验对日常饮食影响的研究（如 1959 年对牛奶的调查），促使政府加强对核辐射灰尘的监测，并赢得公众对禁止核试验条约的支持。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/2017-02-27-consumer-reports-history-12.png&quot; alt=&quot;12&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;1961 年的核辐射避难所宣传图，来源：invisiblethemepark&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;有趣的是，冷战期间很多读者请求 CR 发布「核辐射避难所」指南，但由于其中的复杂变量和未知因素太多，消费者报告拒绝评测。为了照顾读者，最终分享了一位科学家的个人建造经验。&lt;/p&gt;

&lt;p&gt;1962 年，CR 发布了第一份汽车保险报告，并推动车险改革。1965 年， Ralph Nader 出版著名图书《Unsafe at Any Speed》，随后 CR 邀请他加入董事会，为汽车评测提供建议。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/2017-02-27-consumer-reports-history-13.png&quot; alt=&quot;13&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;上世纪 60 年代，汽车数量增加，CR 呼吁错开上班时间，增加公共交通工具，来源：consumerreports.org&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;在 Ralph Nader 的影响下，CR 评测汽车的流程和方法越来越专业。当时 CR 汽车评测的影响力有多大？1965 年， CR 把  Toyota（丰田）Corona 评为「特别适合长途驾驶」， 1975 年，Corona 成了美国汽车市场进口最多的一款车型。&lt;/p&gt;

&lt;p&gt;CR 历史上长期关注过几类产品，有汽车、儿童用品，以及香烟。&lt;/p&gt;

&lt;p&gt;在二十世纪早期，吸烟危害并未成为共识，并且在烟草行业的鼓吹下，吸烟被认为是一件尊贵、性感和潇洒的事情：&lt;/p&gt;

&lt;p&gt;一个著名的契斯特菲尔德牌香烟广告给出这样一幅场景：一位优雅的男士和一位迷人的女士浪漫地坐在海边，男人正在点燃一根卷烟，旁白是： 「呼出我的风格。」来源：钓愚：操纵与欺骗的经济学 - 乔治·阿克洛夫、罗伯特·席勒&lt;/p&gt;

&lt;p&gt;从 1953 到 1964 年，CR 不断发文探讨吸烟危害，揭露烟草行业的诡计，并在 1963  年出版《消费者联盟关于吸烟与公共利益的报告》。&lt;/p&gt;

&lt;p&gt;1964 年，美国卫生总署《吸烟与健康》 出台，以政府立场明确了吸烟危害，文中引用了 CR 的报告。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/2017-02-27-consumer-reports-history-14.png&quot; alt=&quot;14&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;1968 年 11 月，CR 评测了电动玩具，来源：consumerreports.org&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;1968 年，CR 测试了多款电动玩具，发现其中四分之一存在风险，将它们评为「不可接受」。1969 年，在这项测试的促进下，《保护儿童和玩具安全法案》通过。&lt;/p&gt;

&lt;p&gt;1972 年，在 CR 的推动下，《消费者产品安全法》通过，美国 CPSC （消费品安全委员会）成立。同一年 ，CR 第一次测试儿童安全座椅，把 17 款中的 12 款评为「不可接受」，随后致力于推动更严格的安全标准出台。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/2017-02-27-consumer-reports-history-15.png&quot; alt=&quot;15&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;上世纪 70 年代，CR 研究了微波产品的辐射泄漏问题，来源：consumerreports.org&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;1974 年，CR 发布了一系列关于美国水污染的文章，并给出详细的清理建议。为此，CR 获得了当年的 National Magazine Awards（国家杂志奖），在这之后，又获得三次该奖项。&lt;/p&gt;

&lt;p&gt;80 年代， CR 在新内容上进行了多方面的尝试，比如一系列旅游和健康方面的刊物。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/2017-02-27-consumer-reports-history-16.png&quot; alt=&quot;16&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;Penny Power 封面，来源：Consumer Reports - Kevin P. Manion&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;1980 年，CR 出版儿童杂志 Penny Power（后来改为 Zillions ）。1983 年，CR 发表了一篇 28 页的电脑选购建议，评测了包括苹果在内的 17 款个人电脑。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/2017-02-27-consumer-reports-history-17.png&quot; alt=&quot;17&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;上世纪 80 年代的，CR 抨击保健品行业，来源：consumerreports.org&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;在这篇文章里，CR 作出预测：到 2000 年，电脑会像电视一样普及。&lt;/p&gt;

&lt;p&gt;1986 年，CR 董事会决定在 Connecticut（康涅狄格州）的 East Haddam（东哈德姆）买一条跑道，并将其改造成当时最先进的汽车测试场。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/2017-02-27-consumer-reports-history-18.png&quot; alt=&quot;18&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;CR 位于东哈德姆的汽车测试跑道，来源：wikipedia.org&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;这一年，也是 CR/CU 的 50 岁生日。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/2017-02-27-consumer-reports-history-19.png&quot; alt=&quot;19&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;CR 位于东哈德姆的汽车测试跑道，来源：wikipedia.org&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;1988 年，在这个汽车测试场地，CR 测试发现 Suzuki（铃木）的 Samurai（武士） 容易翻车，将它评为「不可接受」。&lt;/p&gt;

&lt;p&gt;报告一出，该车销量急速下降，几年后退出美国市场，并于 1995 年停售。铃木公司很不高兴，在 1996 年将 CR 告上法庭，这场官司一打就是 8 年，最终以「庭外和解」结束。&lt;/p&gt;

&lt;p&gt;到 2010 年为止，CR 和厂商打了 16 次产品诽谤的官司，但没有一次输过或赔款。面对 CR 对自己不利的评测结果，大部分公司选择接受并改进。&lt;/p&gt;

&lt;p&gt;如 2010 年的苹果 iPhone 4 的天线问题（通过派发保护套解决），雷克萨斯的 GX460 SUV 的安全问题（通过召回解决），以及前不久苹果  MacBook Pro 的电池问题（通过软件更新解决）。&lt;/p&gt;

&lt;p&gt;90 年代以后，CR 顺应潮流以多种形式发布信息，包括光盘、电视节目、网站等等，还成立了图书出版部门。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/2017-02-27-consumer-reports-history-20.png&quot; alt=&quot;20&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;上世纪 90 年代的 CR，来源：consumerreports.org&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;1991 年，CR 将总部从弗农山迁至附近的扬克斯。1992 年，CR 的订阅会员达到 200 万。随后几年，CR 向医疗保健行业发起挑战。&lt;/p&gt;

&lt;p&gt;1994 年，CR 促使加州的医疗保健公司从非营利性转为营利性，并将收回来的资金用于公共利益，这一转换计划后来扩展到其他几十个州。1995年，CR 起诉加州的一家医疗保健公司，批评它的营销方式，并阻止其在加州销售。&lt;/p&gt;

&lt;p&gt;同一年，订阅量到达 470 万，进入付费订阅杂志前十名。1996 年底，出版业估计 CR 的读者（包括图书馆和传阅的读者）超过 1800 万，是当时美国最流行的杂志之一。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/2017-02-27-consumer-reports-history-21.png&quot; alt=&quot;21&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;为保护消费者利益，CR 会出面反对一些公司的合并，来源：consumerreports.org&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;CR 不仅爱打官司， 还好管「闲事」。为保护消费者利益，2011 年，CR 出面反对通讯公司 AT&amp;amp;T  收购 T-Mobile ，2015 年，又反对 Comcast（康卡斯特） 收购 Time Warner（时代华纳）。&lt;/p&gt;

&lt;p&gt;但是，步入新世纪以后，CR 遇到新的问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;读者群体老龄化：2010 年时，网络会员平均年龄 56 岁，杂志会员的平均年龄 65 岁。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为了吸引年轻人，CR 进行了多方面的尝试：2006 年收购针对年轻女性的购物杂志「ShopSmart」，2008年收购读者较年轻的消费资讯博客 「Consumerist」。&lt;/p&gt;

&lt;p&gt;去年是 CR 八十年周年，网站大改版，以绿色为基调，设计更年轻化。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/2017-02-27-consumer-reports-history-22.png&quot; alt=&quot;22&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;最近几年的 CR，来源：consumerreports.org&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;除了有来自外界的挑战，CR 还要应对内部的失误，以下是部分负面消息：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;90 年代，CR 发现其财务总监在采购中收取回扣，随后停止了他的工作，并将他告上法庭。&lt;/li&gt;
  &lt;li&gt;2002 年，CR 因质量问题召回汽车仪表板上的用的储物箱，它们之前被作为赠品送给订阅者。&lt;/li&gt;
  &lt;li&gt;2007 年，CR 犯了创立以来最大的错误。在当年的一份评测报告中，CR表示大多数儿童安全座椅在侧面撞击中都不安全。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2007 年的文章引发了恐慌和怀疑，几天后杂志撤回了这一报告，向读者道歉，并用四页的篇幅解释了错误的发生。&lt;/p&gt;

&lt;p&gt;这一事件对消费者报告的声誉产生了影响，但其回应方式某种程度上增强了公众对它的信赖。2008 年，订阅量不降反升，达到 800 万的巅峰。&lt;/p&gt;

&lt;p&gt;新世纪以来，CR 采取了一些有争议的举措：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;网站评测旁附有电商链接，部分产品有返利。&lt;/li&gt;
  &lt;li&gt;与亚马逊合作，允许其部分产品页面显示 CR 的选购指南。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基于多年累积的信誉，大多认为这些举措对其独立性影响不大。&lt;/p&gt;

&lt;p&gt;话说回来， 当年的消费者研究（Consumers Research）上哪去了？多年以来，消费者研究一边测试商品，一边打压 CR 。随着两个 CR 的差距越来越大， 80 年代，消费者研究被卖给私人，最终在 1983 年，正式关闭实验室。自此，消费者研究只关注消费领域的政策和资讯，不再测试产品。&lt;/p&gt;

&lt;p&gt;正如斯图尔特 蔡斯为 CR 二十五周年（1961 年）写的短文中所说：&lt;/p&gt;

&lt;p&gt;某种意义上，（独立的）消费者测试是一种必然的、对受大众媒体裹挟而困惑的消费者的回应。&lt;/p&gt;

&lt;p&gt;80 余年，无广告，拒绝送测，不受企业资助，仅靠捐赠和订阅生存，消费者报告战胜了老东家的诽谤，同行的排斥，企业的敌视，熬过了二战的低迷，每年评测数千种产品，在商品市场正视听、拨云雾，帮助消费决策，推动消费立法，领导消费者运动，最终成为消费者中神祇一般的存在。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/2017-02-27-consumer-reports-history-22.png&quot; alt=&quot;23&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;CR 不同年代的产品测试场景，来源：Consumer Reports&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;2011 年，曾有报道称 CR 有意进入中国，但至今没有动静。最近几年，国内效仿 CR 的机构越来越多，也不断有人打出「中国的消费者报告」的旗号。&lt;/p&gt;

&lt;p&gt;一切都好像第二套广播体操开头说的那样：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;时代在召唤&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;让我们拭目以待。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;小贴士：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在评测完毕之后，CR 一般将产品拍卖给员工。&lt;/li&gt;
  &lt;li&gt;CR 不予许企业在宣传中引用其评测结果，不惜为此诉诸法律。&lt;/li&gt;
  &lt;li&gt;在很长一段时间里，CR 刻意与企业和政府保持距离，以免影响判断的独立性。2007年的失误出现后，才开始更多地咨询外界意见。&lt;/li&gt;
  &lt;li&gt;CR 目前有 50 个实验室，100 多个测试专家，超过 25 个调查统计研究人员，超过 150个匿名购物者。&lt;/li&gt;
  &lt;li&gt;CR 大部分测试由自己的实验室完成，少数委托给三方实验室，2007 年的比例是十分之一。&lt;/li&gt;
  &lt;li&gt;CR 曾拒绝一家汽车经销商的大量订阅，以免影响杂志的独立性和客观性。&lt;/li&gt;
  &lt;li&gt;CR和「CPSC’（美国消费品安全委员会）共享数据，帮助缺陷产品召回。&lt;/li&gt;
  &lt;li&gt;虽然有很多公司抱怨 CR，但都是针对其评测和结论，很少有人质疑其动机。&lt;/li&gt;
  &lt;li&gt;最近几年，CR 杂志和网络订阅量大致在 700 - 800 万。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;主要参考资料：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.fundinguniverse.com/company-histories/consumers-union-history/&quot;&gt;Consumers Union History - fundinguniverse&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.consumerreports.org/cro/about-us/whats-behind-the-ratings/index.htm&quot;&gt;Behind Our Ratings - Consumer Reports&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.consumerreports.org/consumer-protection/cover-worthy-80-years-of-consumer-reports-magazine/&quot;&gt;Cover Worthy: 80 Years of Consumer Reports Magazine - Consumer Reports&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.consumerreports.org/cro/about-us/history/vintage-photos/index.htm&quot;&gt;Vintage Photo Gallery - Consumer Reports&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://books.google.co.jp/books?id=MxOjAgAAQBAJ&amp;amp;hl=zh-CN&amp;amp;source=gbs_navlinks_s&quot;&gt;Jim Guest - Timothy LaPalme&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://play.google.com/store/books/details?id=uUUMCgAAQBAJ&amp;amp;rdid=book-uUUMCgAAQBAJ&amp;amp;rdot=1&amp;amp;source=gbs_vpt_read&amp;amp;pcampaignid=books_booksearch_viewport&quot;&gt;Watchdogs and Whistleblowers: A Reference Guide to Consumer Activism - Robert N. Mayer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.theatlantic.com/business/archive/2016/04/consumer-reports-in-the-age-of-the-amazon-review/477108/&quot;&gt;Consumer Reports in the Age of the Amazon Review -  The Atlantic&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.nytimes.com/2007/12/08/business/media/08consumer.html&quot;&gt;Success Without Ads - The New York Times&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.wsj.com/articles/SB10001424052748703866704575224093017379202&quot;&gt;Meet the Sticklers -  WSJ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://books.google.co.jp/books/about/Consumer_Reports.html?id=lCAiVjC6Sp8C&amp;amp;redir_esc=y&quot;&gt;Consumer Reports - Kevin P. Manion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www2.scc.rutgers.edu/ead/manuscripts/consumers_introf.html&quot;&gt;An Inventory to the Records of Consumers’ Research, Inc. - Gregory L. Williams&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 21 Feb 2017 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2017/02/21/consumer-reports-history.markup/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/21/consumer-reports-history.markup/</guid>
        
        <category>笔记</category>
        
        
      </item>
    
      <item>
        <title>Merge、Rebase的选择</title>
        <description>&lt;blockquote&gt;
&lt;p&gt;BY &lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/&quot;&gt;童仲毅geeeeeeeeek@github&lt;/a&gt;——目前看到的关于Merge、Rebase最通俗易懂的wiki。&lt;/p&gt;
&lt;p&gt;这是一篇在原文(&lt;a href=&quot;https://www.atlassian.com/git/tutorials/merging-vs-rebasing&quot;&gt;BY atlassian&lt;/a&gt;)基础上演绎的译文。除非另行注明，页面上所有内容采用知识共享-署名(&lt;a herf=&quot;https://creativecommons.org/licenses/by/2.5/au/deed.en&quot;&gt;CC BY 2.5 AU协议共享。&lt;/a&gt;)&lt;/p&gt; 
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; 这个命令经常被人认为是一种Git巫术，初学者应该避而远之。但如果使用得当的话，它能给你的团队开发省去太多烦恼。在这篇文章中，我们会比较&lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase&lt;/code&gt;和类似的&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge&lt;/code&gt;命令，找到Git工作流中rebase的所有用法。&lt;/p&gt;

&lt;h3 id=&quot;概述&quot;&gt;概述&lt;/h3&gt;
&lt;p&gt;你要知道的第一件事是，&lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; 和&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge&lt;/code&gt; 做的事其实是一样的。它们都被设计来将一个分支的更改并入另一个分支，只不过方式有些不同。&lt;/p&gt;

&lt;p&gt;想象一下，你刚创建了一个专门的分支开发新功能，然后团队中另一个成员在master分支上添加了新的提交。这就会造成提交历史被Fork一份，用Git来协作的开发者应该都很清楚。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/919155232a162011b8a64a84872482034c0ce999/68747470733a2f2f7777772e61746c61737369616e2e636f6d2f6769742f696d616765732f7475746f7269616c732f616476616e6365642f6d657267696e672d76732d7265626173696e672f30312e737667&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在，如果master中新的提交和你的工作是相关的。为了将新的提交并入你的分支，你有两个选择：merge或rebase。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;merge&quot;&gt;Merge&lt;/h3&gt;
&lt;p&gt;将master分支合并到feature分支最简单的办法就是用下面这些命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;　　git checkout feature
　　git merge master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;或者，你也可以把它们压缩在一行里。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git merge master feature
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;feature分支中新的合并提交(merge　commit)将两个分支的历史连在了一起。你会得到下面这样的分支结构：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/266aef357af48c218b8779cd489bcb8839aa0a25/68747470733a2f2f7777772e61746c61737369616e2e636f6d2f6769742f696d616765732f7475746f7269616c732f616476616e6365642f6d657267696e672d76732d7265626173696e672f30322e737667&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Merge好在它是一个安全的操作。现有的分支不会被更改，避免了rebase潜在的缺点（后面会说）。&lt;/p&gt;

&lt;p&gt;另一方面，这同样意味着每次合并上游更改时feature分支都会引入一个外来的合并提交。如果master非常活跃的话，这或多或少会污染你的分支历史。虽然高级的git log 选项可以减轻这个问题，但对于开发者来说，还是会增加理解项目历史的难度。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;rebase&quot;&gt;Rebase&lt;/h3&gt;
&lt;p&gt;作为merge的替代选择，你可以像下面这样将feature分支并入master分支：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout feature
git rebase master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;它会把整个feature分支移动到master分支的后面，有效地把所有master分支上新的提交并入过来。但是，rebase为原分支上每一个提交创建一个新的提交，重写了项目历史，并且不会带来合并提交。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/626197748d8d8493b194ce59874b71897c88c39f/68747470733a2f2f7777772e61746c61737369616e2e636f6d2f6769742f696d616765732f7475746f7269616c732f616476616e6365642f6d657267696e672d76732d7265626173696e672f30332e737667&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;rebase最大的好处是你的项目历史会非常整洁。首先，它不像&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge&lt;/code&gt; 那样引入不必要的合并提交。其次，如上图所示，rebase导致最后的项目历史呈现出完美的线性——你可以从项目终点到起点浏览而不需要任何的Fork。这让你更容易使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt; 、&lt;code class=&quot;highlighter-rouge&quot;&gt;git bisect&lt;/code&gt; 和&lt;code class=&quot;highlighter-rouge&quot;&gt;gitk&lt;/code&gt; 来查看项目历史。&lt;/p&gt;

&lt;p&gt;不过，这种简单的提交历史会带来两个后果：安全性和可跟踪性。如果你违反了Rebase黄金法则，重写项目历史可能会给你的协作工作流带来灾难性的影响。此外，rebase不会有合并提交中附带的信息——你看不到feature分支中并入了上游的哪些更改。&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;交互式的rebase&quot;&gt;交互式的rebase&lt;/h3&gt;
&lt;p&gt;交互式的rebase允许你更改并入新分支的提交。这比自动的rebase更加强大，因为它提供了对分支上提交历史完整的控制。一般来说，这被用于将feature分支并入master分支之前，清理混乱的历史。&lt;/p&gt;

&lt;p&gt;把&lt;code class=&quot;highlighter-rouge&quot;&gt;-i&lt;/code&gt; 传入&lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; 选项来开始一个交互式的rebase过程：
　　&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout feature
git rebase -i master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;它会打开一个文本编辑器，显示所有将被移动的提交：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pick 33d5b7a Message for commit #1
pick 9480b3d Message for commit #2
pick 5c67e61 Message for commit #3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这个列表定义了rebase将被执行后分支会是什么样的。更改pick 命令或者重新排序，这个分支的历史就能如你所愿了。比如说，如果第二个提交修复了第一个提交中的小问题，你可以用fixup 命令把它们合到一个提交中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pick 33d5b7a Message for commit #1
fixup 9480b3d Message for commit #2
pick 5c67e61 Message for commit #3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;保存后关闭文件，Git会根据你的指令来执行rebase，项目历史看上去会是这样：
　　
&lt;img src=&quot;https://camo.githubusercontent.com/b685d6f2a7b4ecf6896fa2439e8da2fb958195fd/68747470733a2f2f7777772e61746c61737369616e2e636f6d2f6769742f696d616765732f7475746f7269616c732f616476616e6365642f6d657267696e672d76732d7265626173696e672f30342e737667&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　忽略不重要的提交会让你的feature分支的历史更清晰易读。这是git merge 做不到的。
　　&lt;/p&gt;
&lt;h3 id=&quot;rebase的黄金法则&quot;&gt;Rebase的黄金法则&lt;/h3&gt;
&lt;p&gt;当你理解rebase是什么的时候，最重要的就是什么时候 不能 用rebase。git rebase 的黄金法则便是，绝不要在公共的分支上使用它。&lt;/p&gt;

&lt;p&gt;比如说，如果你把master分支rebase到你的feature分支上会发生什么：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/b3d06635fdadff5863f94aa53b16bba69452f04f/68747470733a2f2f7777772e61746c61737369616e2e636f6d2f6769742f696d616765732f7475746f7269616c732f616476616e6365642f6d657267696e672d76732d7265626173696e672f30352e737667&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这次rebase将master分支上的所有提交都移到了feature分支后面。问题是它只发生在你的代码仓库中，其他所有的开发者还在原来的master上工作。因为rebase引起了新的提交，Git会认为你的master分支和其他人的master已经分叉了。&lt;/p&gt;

&lt;p&gt;同步两个master分支的唯一办法是把它们merge到一起，导致一个额外的合并提交和两堆包含同样更改的提交。不用说，这会让人非常困惑。&lt;/p&gt;

&lt;p&gt;所以，在你运行git rebase 之前，一定要问问你自己“有没有别人正在这个分支上工作？”。如果答案是肯定的，那么把你的爪子放回去，重新找到一个无害的方式（如git revert）来提交你的更改。不然的话，你可以随心所欲地重写历史。&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;强制推送&quot;&gt;强制推送&lt;/h3&gt;
&lt;p&gt;如果你想把rebase之后的master分支推送到远程仓库，Git会阻止你这么做，因为两个分支包含冲突。但你可以传入&lt;code class=&quot;highlighter-rouge&quot;&gt;--force&lt;/code&gt; 标记来强行推送。就像下面一样：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;小心使用这个命令！！！&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git push --force
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;它会重写远程的master分支来匹配你仓库中rebase之后的master分支，对于团队中其他成员来说这看上去很诡异。所以，务必小心这个命令，只有当你知道你在做什么的时候再使用。&lt;/p&gt;

&lt;p&gt;仅有的几个强制推送的使用场景之一是，当你在想向远程仓库推送了一个私有分支之后，执行了一个本地的清理（比如说为了回滚）。这就像是在说“哦，其实我并不想推送之前那个feature分支的。用我现在的版本替换掉吧。”同样，你要注意没有别人正在这个feature分支上工作。&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;工作流&quot;&gt;工作流&lt;/h3&gt;
&lt;p&gt;rebase可以或多或少应用在你们团队的Git工作流中。在这一节中，我们来看看在feature分支开发的各个阶段中，rebase有哪些好处。&lt;/p&gt;

&lt;p&gt;第一步是在任何和&lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; 有关的工作流中为每一个feature专门创建一个分支。它会给你带来安全使用rebase的分支结构：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/4b8c7e7855643d46885f8df41b4dc4de11dc89a3/68747470733a2f2f7777772e61746c61737369616e2e636f6d2f6769742f696d616765732f7475746f7269616c732f616476616e6365642f6d657267696e672d76732d7265626173696e672f30362e737667&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;本地清理&quot;&gt;本地清理&lt;/h3&gt;
&lt;p&gt;在你工作流中使用rebase最好的用法之一就是清理本地正在开发的分支。隔一段时间执行一次交互式rebase，你可以保证你feature分支中的每一个提交都是专注和有意义的。你在写代码时不用担心造成孤立的提交——因为你后面一定能修复。&lt;/p&gt;

&lt;p&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; 的时候，你有两个基(base)可以选择：上游分支（比如master）或者你feature分支中早先的一个提交。我们在“交互式rebase”一节看到了第一种的例子。后一种在当你只需要修改最新几次提交时也很有用。比如说，下面的命令对最新的3次提交进行了交互式rebase：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout feature
git rebase -i HEAD~3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过指定&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD~3&lt;/code&gt;作为新的基提交，你实际上没有移动分支——你只是将之后的3次提交重写了。注意它不会把上游分支的更改并入到feature分支中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/890e91bbd54876ff01865403164de70fe47b555b/68747470733a2f2f7777772e61746c61737369616e2e636f6d2f6769742f696d616765732f7475746f7269616c732f616476616e6365642f6d657267696e672d76732d7265626173696e672f30372e737667&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果你想用这个方法重写整个feature分支，&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge-base&lt;/code&gt; 命令非常方便地找出feature分支开始分叉的基。下面这段命令返回基提交的ID，你可以接下来将它传给&lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git merge-base feature master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;交互式rebase是在你工作流中引入git rebase 的的好办法，因为它只影响本地分支。其他开发者只能看到你已经完成的结果，那就是一个非常整洁、易于追踪的分支历史。&lt;/p&gt;

&lt;p&gt;但同样的，这只能用在私有分支上。如果你在同一个feature分支和其他开发者合作的话，这个分支是公开的，你不能重写这个历史。&lt;/p&gt;

&lt;p&gt;用带有交互式的rebase清理本地提交，这是无法用&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge&lt;/code&gt; 命令代替的。&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;将上游分支上的更改并入feature分支&quot;&gt;将上游分支上的更改并入feature分支&lt;/h3&gt;
&lt;p&gt;在概览一节，我们看到了feature分支如何通过&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge&lt;/code&gt; 或&lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; 来并入上游分支。merge是保留你完整历史的安全选择，rebase将你的feature分支移动到master分支后面，创建一个线性的历史。&lt;/p&gt;

&lt;p&gt;git rebase 的用法和本地清理非常类似（而且可以同时使用），但之间并入了master上的上游更改。&lt;/p&gt;

&lt;p&gt;记住，rebase到远程分支而不是master也是完全合法的。当你和另一个开发者在同一个feature分之上协作的时候，你会用到这个用法，将他们的更改并入你的项目。&lt;/p&gt;

&lt;p&gt;比如说，如果你和另一个开发者——John——往feature分支上添加了几个提交，在从John的仓库中fetch之后，你的仓库可能会像下面这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/6758dd2be664491c52dc4c246939f1ad5a14fba9/68747470733a2f2f7777772e61746c61737369616e2e636f6d2f6769742f696d616765732f7475746f7269616c732f616476616e6365642f6d657267696e672d76732d7265626173696e672f30382e737667&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;就和并入master上的上游更改一样，你可以这样解决这个Fork：要么merge你的本地分支和John的分支，要不把你的本地分支rebase到John的分支后面。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/c45e2609be5941aaedac397b08770be35d490db7/68747470733a2f2f7777772e61746c61737369616e2e636f6d2f6769742f696d616765732f7475746f7269616c732f616476616e6365642f6d657267696e672d76732d7265626173696e672f30392e737667&quot; alt=&quot;此处输入图片的描述&quot; /&gt;
&lt;img src=&quot;https://camo.githubusercontent.com/c45e2609be5941aaedac397b08770be35d490db7/68747470733a2f2f7777772e61746c61737369616e2e636f6d2f6769742f696d616765732f7475746f7269616c732f616476616e6365642f6d657267696e672d76732d7265626173696e672f30392e737667&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注意，这里的rebase没有违反Rebase黄金法则，因为只有你的本地分支上的commit被移动了，之前的所有东西都没有变。这就像是在说“把我的改动加到John的后面去”。在大多数情况下，这比通过合并提交来同步远程分支更符合直觉。&lt;/p&gt;

&lt;p&gt;默认情况下，&lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt; 命令会执行一次merge，但你可以传入&lt;code class=&quot;highlighter-rouge&quot;&gt;--rebase&lt;/code&gt; 来强制它通过rebase来整合远程分支。&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;通过pull-request进行审查&quot;&gt;通过Pull Request进行审查&lt;/h3&gt;
&lt;p&gt;如果你将pull request作为你代码审查过程中的一环，你需要避免在创建pull request之后使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase&lt;/code&gt;。只要你发起了pull request，其他开发者能看到你的代码，也就是说这个分支变成了公共分支。重写历史会造成Git和你的同事难以找到这个分支接下来的任何提交。&lt;/p&gt;

&lt;p&gt;来自其他开发者的任何更改都应该用&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge&lt;/code&gt; 而不是&lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; 来并入。&lt;/p&gt;

&lt;p&gt;因此，在提交pull request前用交互式的rebase进行代码清理通常是一个好的做法。&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;并入通过的功能分支&quot;&gt;并入通过的功能分支&lt;/h3&gt;

&lt;p&gt;如果某个功能被你们团队通过了，你可以选择将这个分支rebase到master分支之后，或是使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge&lt;/code&gt; 来将这个功能并入主代码库中。&lt;/p&gt;

&lt;p&gt;这和将上游改动并入feature分支很相似，但是你不可以在master分支重写提交，你最后需要用&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge&lt;/code&gt; 来并入这个feature。但是，在merge之前执行一次rebase，你可以确保merge是一直向前的，最后生成的是一个完全线性的提交历史。这样你还可以加入pull request之后的提交。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/7a158568c55aa3b65bc58a648aabb17b36573eaa/68747470733a2f2f7777772e61746c61737369616e2e636f6d2f6769742f696d616765732f7475746f7269616c732f616476616e6365642f6d657267696e672d76732d7265626173696e672f31302e737667&quot; alt=&quot;此处输入图片的描述&quot; /&gt;
&lt;img src=&quot;https://camo.githubusercontent.com/7a158568c55aa3b65bc58a648aabb17b36573eaa/68747470733a2f2f7777772e61746c61737369616e2e636f6d2f6769742f696d616765732f7475746f7269616c732f616476616e6365642f6d657267696e672d76732d7265626173696e672f31302e737667&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果你还没有完全熟悉git rebase，你还可以在一个临时分支中执行&lt;code class=&quot;highlighter-rouge&quot;&gt;rebase&lt;/code&gt;。这样的话，如果你意外地弄乱了你feature分支的历史，你还可以查看原来的分支然后重试。&lt;/p&gt;

&lt;p&gt;比如说：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout feature
git checkout -b temporary-branch
git rebase -i master
# [清理目录]
git checkout master
git merge temporary-branch
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

&lt;p&gt;你使用rebase之前需要知道的知识点都在这了。如果你想要一个干净的、线性的提交历史，没有不必要的合并提交，你应该使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; 而不是&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge&lt;/code&gt; 来并入其他分支上的更改。&lt;/p&gt;

&lt;p&gt;另一方面，如果你想要保存项目完整的历史，并且避免重写公共分支上的commit， 你可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge&lt;/code&gt;。两种选项都很好用，但至少你现在多了&lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase&lt;/code&gt;这个选择。&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Feb 2017 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2017/02/21/github-rebase-merge.markup/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/21/github-rebase-merge.markup/</guid>
        
        <category>github</category>
        
        <category>笔记</category>
        
        
      </item>
    
      <item>
        <title>土耳其图集</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“Türk Marşı”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/WechatIMG5.jpeg&quot; alt=&quot;&quot; /&gt;
 &lt;small class=&quot;img-hint&quot;&gt;烤肉！烤肉！烤肉！—-伊斯坦布尔&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E5%95%8A%E5%95%8A%E5%95%8A.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;啊啊啊啊啊—-伊斯坦布尔&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E6%97%A0%E5%A3%B0.png&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;无声的表演—-伊斯坦布尔&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E4%BC%8A%E6%96%AF%E5%9D%A6%E5%B8%83%E5%B0%94%E6%AD%A5%E8%A1%8C%E8%A1%97.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;步行街—-伊斯坦布尔&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E4%BC%8A%E6%96%AF%E5%9D%A6%E5%B8%83%E5%B0%94%E5%A4%9C%E6%99%AF.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;夜—-伊斯坦布尔&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E6%B0%B4%E5%AE%AB.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;水宫—-伊斯坦布尔&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E6%B0%B4%E5%AE%AB2.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;水宫—-伊斯坦布尔&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E6%B0%B4%E5%AE%AB3.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;水宫—-伊斯坦布尔&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E4%BC%8A%E5%85%B9%E5%AF%86%E5%B0%94.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;盘旋—-伊兹密尔&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E4%BB%A5%E4%BD%9B%E6%89%80.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;以佛所—-伊兹密尔&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E9%BB%91%E6%B5%B7%E6%B5%B7%E5%B3%A11.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;黑海海峡&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E9%BB%91%E6%B5%B7%E6%B5%B7%E5%B3%A12.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;黑海海峡&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E9%87%91%E8%A7%92%E6%B9%BE1.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;金角湾&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E9%87%91%E8%A7%92%E6%B9%BE2.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;金角湾&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E9%87%91%E8%A7%92%E6%B9%BE3.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;金角湾&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E9%87%91%E8%A7%92%E6%B9%BE4.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;金角湾&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E6%A3%89%E8%8A%B1%E5%A0%A11.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;棉花堡&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E6%A3%89%E8%8A%B1%E5%A0%A1.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;棉花堡的…&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E5%8D%A1%E5%B8%95%E5%A4%9A%E5%A5%87%E4%BA%9A.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;卡帕多奇亚&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E5%8D%A1%E5%B8%95%E5%A4%9A%E5%A5%87%E4%BA%9A%E5%A5%A5%E7%89%B9%E6%9B%BC.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;卡帕多奇亚&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E5%8C%85%E5%AD%90%E8%80%81%E7%A6%8F%E7%89%B9.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;包子-82年老福特&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E5%8C%85%E5%AD%90%E8%80%81%E7%A6%8F%E7%89%B92.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;包子-82年老福特&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E9%BE%9F%E9%BE%9F%E8%80%81%E7%A6%8F%E7%89%B9.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;龟龟-82年老福特&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E5%AE%89%E5%A1%94%E5%88%A9%E4%BA%9A1.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;爱琴海-安塔利亚&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E5%AE%89%E5%A1%94%E5%88%A9%E4%BA%9A2.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;安塔利亚&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E5%AE%89%E5%A1%94%E5%88%A9%E4%BA%9A3.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;龟龟—-安塔利亚&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E6%B3%A1%E8%84%9A1.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;泡脚&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E6%B3%A1%E8%84%9A2.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;继续泡脚&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E7%BA%A2%E8%8C%B6.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;土耳其红茶&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E5%85%89%E8%8A%B1.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;日落&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/%E5%85%89%E6%9D%9F%E5%8C%85%E5%AD%90.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;最后摆拍两下&lt;/small&gt;
&lt;img src=&quot;http://image.lawootrip.com/%E5%8C%85%E5%AD%90%E5%A2%99%E8%A7%92.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;最后摆拍一下&lt;/small&gt;
&lt;img src=&quot;http://image.lawootrip.com/%E8%80%81%E5%A4%B4.JPG&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;变身&lt;/small&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 19 Feb 2017 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2017/02/19/turkey.markup/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/19/turkey.markup/</guid>
        
        <category>图集</category>
        
        
      </item>
    
      <item>
        <title>克什米尔之殇</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“اپ سے مل کر خوشی ہوی ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;缘起&quot;&gt;缘起&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://p1.bqimg.com/567571/f6b44c6abca1eb36.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　这里的房屋大多是木质结构，尖顶，条件好的人家还带有一个进行穆斯林祈祷仪式的砖砌塔楼。Ghulam家算条件好的，但家中家具很少，客厅几乎没有家具，只有一张五米见方精致的手工地毯铺满房间，他们平常就在这里看书看报、吃饭喝茶，我们也都席地坐在地毯上，面前摆着克什米尔藏红花茶，醇香扑鼻。&lt;/p&gt;

&lt;p&gt;　　克什米尔传统大袍套在老人的身上，两只袖子总是空空的耷拉着，隐藏在袍子里的手握着肚子前的特色火炉——藤蔓编制而成的篮子，盛着些许燃着的炭灰用来取暖。
老人吸了一口水烟，往事立马随着烟气将我们笼罩。
&lt;img src=&quot;http://p1.bqimg.com/567571/cac33d40135de4f6.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://i1.piimg.com/567571/5fdacaed4f06ab67.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;过去即他乡&quot;&gt;过去即他乡&lt;/h3&gt;

&lt;p&gt;　　1965年一颗炮弹落到他家的祈祷塔楼上，门窗都被炸飞了。这被认为是真主不满的表示，他们延长了每天祈祷的时间。几天后，他的母亲去邻居家借纺轮，在回来的路上被流弹击中后脑，于是他在剩下的岁月里只能依靠照片来怀念母亲。没过多久，印巴实现第二次停火，克什米尔迎来了短暂的和平期，印度兵的吉普车和坦克从南边开进了克什米尔，七岁的Ghulam对他们并无厌恶，成年人的恐惧在孩子们看来无法理解，他甚至有些庆幸，因为印度军方禁止他们每天五次的礼拜，这给了他更多玩耍的时间，但“好景”不长，十岁开始他就被送进了老师家学习制作披肩。
&lt;img src=&quot;http://p1.bpimg.com/567571/f8c0edb5bea2054e.png&quot; alt=&quot;&quot; /&gt;
　　在那个年代里，每个人的睡眠时间都很少，每天要劳动，要打扫院子，要种地，学习披肩技艺和印度语，吃的是万变不离其宗的菜汤米饭，冬天异常寒冷，屋子里没有取暖的设备，在零下十几度的房间学习织作，一坐就是十个小时，不能燃炭炉，因为那样会烤坏羊绒，只能靠手指不停的穿梭织作，一天下来，总是要花一个多小时让自己已经被冻紫的脚恢复知觉。
　　问他为什么在那种时候还要学习做披肩，长达数十年的战乱把这里变成贸易和旅游的禁地，披肩又能卖给谁呢？
　　老人说克什米尔人做披肩不是为了赚钱，这是很多很多年前波斯居鲁士大帝的带来的文明，我们要传承下去，这是我们的命。
老人说我们跟谁都不争，双手烤着生命之火取暖；火萎了，我就准备走了，但披肩的手艺还有我的儿子传下去。&lt;/p&gt;

&lt;p&gt;　　57岁的Ghulam看起来像古稀之年的老人，满脸沟壑却的他似乎已不太认识几十年前那个在夹缝中长大的自己。不过对于那个十几岁的少年来说，也许并不觉得苦。对于一辈子只做一件事的人来说，还有什么苦难可以打败他呢？&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;方生方死&quot;&gt;方生方死&lt;/h3&gt;
&lt;p&gt;　　这块美丽土地曾享受过长时间的和平，但早在印度、巴基斯坦为之大肆操戈前，它已受到各类争斗的蹂躏。
　　早在公元前300年波斯人就武力打通了外界到克什米尔的通路，同时带来披肩的原始工艺，公元326年亚历山大大帝沿着波斯人的轨迹来到克什米尔，怀着解救被缚普罗米修斯之心的亚历山大终究没能杀死啃噬其肝脏的秃鹰，饱受痢疾之苦的马其顿人在征服了克什米尔后回到巴比伦不久就病逝了。
　　接下来到达克什米尔的是自东土大唐而来的唐僧，唐僧在古称迦湿弥罗的克什米尔学习三年，孙悟空显然没对师傅的高反帮上什么忙，法师用了一年时间才适应高海拔地区的环境。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“此北二千余里，经途艰阻，寒风飞雪，至秣逻娑国。”——《大唐西域记》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　　此后的一千年只能用混战概括。8世纪开始阿拉伯势力进入克什米尔，克什米尔开始穆斯林化，17世纪因为佛教天主教之争，克什米尔的拉达克人和现今西藏阿里扎达县的古格人发生战争，最终古格王朝一夜之间被屠城，古格宏伟的宫殿和华美的壁画，直到20世纪才被意大利人杜奇教授重新发现。
古格王朝的惨败传到北京，康熙震怒，增派2500蒙古骑兵支援吐蕃，又在克什米尔的土地上同拉达克背后的莫卧儿王朝鏖战连年。
　　尚未得到片刻喘气，1829年英国人在克什米尔宣布殖民，接下来的近代史更是被接连不断的暴力和恐怖事件充斥，三次印巴战争受伤最深的总是克什米尔，就在我写下这篇文章的时候克什米尔的朋友告诉我他们那里又发生了一次大规模罢工，人们向印度军警投掷石块，被暴力镇压…
&lt;img src=&quot;http://i1.piimg.com/567571/d31f4a653ff1efe7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;何去何从&quot;&gt;何去何从？&lt;/h3&gt;

&lt;p&gt;　　一千个克什米尔人有一千个答案，年轻人如Asif说我们只是要和平，上了年纪的人如Ghulam说我只希望手艺传下去。但对于地处大国文明交汇地带的克什米尔来说，和平很可能是永远的奢望。正如法国学者鲁保罗所说，自波斯以降，克什米尔人习惯了一个帝国的存在。
　　聊到这里，城里每日五次响彻全城的祷告声准时响起，他们放下手中的事情全身心的投入礼拜的状态。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ghulam给我讲过《古兰经》关于末日的描述：“或如重重黑暗﹐笼罩着汪洋大海﹐波涛澎湃﹐上有黑云﹐黑暗重重迭迭﹐观者伸出手来时﹐几乎不见五指。 真主没有给谁光明﹐谁就绝无光明。”(古兰经﹐24﹕40)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;后记&quot;&gt;后记&lt;/h3&gt;
&lt;p&gt;　　好像看一部规模宏大的电影，居鲁士时代的坟墓、丝绸之路的商队、唐朝的高僧、阿拉伯人的征伐、印巴的战俘营，被污染但依然壮丽的风光。在影片最后，男主人公站在克什米尔最高的山峰上，影片没有告诉我们他是否能够活着下山。
　　住在地球小屋里的人们，烧漆黑的松枝照明，从前的一场场雪，炭火之光和燃烧的松枝——夜晚说故事，无需太亮。
&lt;img src=&quot;http://p1.bqimg.com/567571/e18f0ca8b67baf1e.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Feb 2017 19:05:00 +0000</pubDate>
        <link>http://localhost:4000/2017/02/15/Kashmir-tear/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/15/Kashmir-tear/</guid>
        
        <category>生活</category>
        
        
      </item>
    
      <item>
        <title>Welcome to LawooTrip</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“Yeah It’s on. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;龟龟 的 Blog 就这么开通了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#0&quot;&gt;跳过废话，直接看技术实现 &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;其实并没有废话&lt;/p&gt;

&lt;p&gt;………………………………
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;2017 年，龟龟 总算有个地方可以好好写点东西了。&lt;/p&gt;

&lt;p&gt;历时大半个月，断断续续的，终于把个人站搭建起来。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;目录&quot;&gt;目录&lt;/h1&gt;

&lt;h3 id=&quot;1创建属于你的gitpages&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1.创建属于你的GitPages&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;2配置和使用你的gitpages&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2.配置和使用你的GitPages&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;3使用jekyll搭建博客系统&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3.使用Jekyll搭建博客系统&lt;/a&gt;&lt;/h3&gt;

&lt;p id=&quot;0&quot;&gt;&lt;/p&gt;
&lt;p id=&quot;1&quot;&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;1创建属于你的gitpages-1&quot;&gt;1.创建属于你的GitPages&lt;/h2&gt;

&lt;p&gt;既然是在GitHub上搭建博客，当然要先去人家平台上&lt;a href=&quot;https://github.com&quot;&gt;注册&lt;/a&gt;自己的账号。&lt;/p&gt;

&lt;p&gt;注册流程很简单，基本就是根据官方引导往下走就可以了。&lt;/p&gt;

&lt;p&gt;注册号账号后，创建一个属于自己的repository，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;注意：repository名称的格式必须是：&quot;ID.github.io&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://image.lawootrip.com/2017-02-15-01&quot; alt=&quot;&quot; /&gt;
&lt;small class=&quot;img-hint&quot;&gt;&lt;a href=&quot;http://www.jianshu.com/p/0ea178531ac8&quot;&gt;细节流程参考这个教程&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;推荐勾选自带README的选项，免去日后还得添加README的麻烦。&lt;/p&gt;

&lt;p id=&quot;2&quot;&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;2配置和使用你的gitpages-1&quot;&gt;2.配置和使用你的GitPages&lt;/h2&gt;

&lt;h5 id=&quot;配置和使用github&quot;&gt;配置和使用GitHub&lt;/h5&gt;

&lt;p&gt;本块教程主要参考wayne23的&lt;a href=&quot;http://www.cnblogs.com/wayne23/p/4313630.html&quot;&gt;Github的基本配置与使用&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;配置ssh-keys&quot;&gt;配置SSH keys&lt;/h5&gt;
&lt;p&gt;首先我们需要检查你电脑上现有的ssh key：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd ~/. ssh 检查本机的ssh密钥
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果提示：No such file or directory 说明你是第一次使用git。&lt;/p&gt;

&lt;h5 id=&quot;生成新的ssh-keys&quot;&gt;生成新的SSH keys&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-keygen -t rsa -C &quot;你用来注册的邮件地址@xxx.com&quot;
Generating public/private rsa key pair.
Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):
&amp;lt;回车就好&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;注意: 此处的「-C」的是大写的「C」&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;然后系统会要你输入密码：
    Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;
    Enter same passphrase again:&lt;再次输入加密串&gt;&lt;/再次输入加密串&gt;&lt;/输入加密串&gt;&lt;/p&gt;

&lt;p&gt;在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;注意：输入密码的时候没有*字样的，你直接输入就可以了。&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;添加ssh-key到github&quot;&gt;添加SSH Key到GitHub&lt;/h5&gt;
&lt;p&gt;在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MAC下路径
/Users/lizhimin/.ssh/id_rsa.pub.
WINDOWS下路径
C:\Documents and Settings\Administrator.ssh\id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;此文件里面内容为刚才生成人密钥。如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。&lt;/p&gt;

&lt;p&gt;登陆github系统。点击右上角的 Account Settings—&amp;gt;SSH Public keys —&amp;gt; add another public keys&lt;/p&gt;

&lt;p&gt;把你本地生成的密钥复制到里面（key文本框中）， 点击 add key 就ok了&lt;/p&gt;

&lt;h5 id=&quot;测试&quot;&gt;测试&lt;/h5&gt;
&lt;p&gt;可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh -T git@github.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果是下面的反馈：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The authenticity of host 'github.com (207.97.227.239)' can't be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
Are you sure you want to continue connecting (yes/no)?
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;不要紧张，输入yes就好，然后会看到：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hi 你的名字! You've successfully authenticated, but GitHub does not provide shell access.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;设置用户信息&quot;&gt;设置用户信息&lt;/h5&gt;
&lt;p&gt;现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。&lt;/p&gt;

&lt;p&gt;Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。
    git config –global user.name “cnfeat”//用户名
    git config –global user.email  “cnfeat@gmail.com”//填写自己的邮箱&lt;/p&gt;

&lt;h5 id=&quot;ssh-key配置成功&quot;&gt;SSH Key配置成功&lt;/h5&gt;
&lt;p&gt;本机已成功连接到github。&lt;/p&gt;

&lt;p&gt;若有问题，请重新设置。常见错误请参考：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://help.github.com/articles/connecting-to-github-with-ssh/&quot;&gt;GitHub Help - Generating SSH Keys&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://help.github.com/articles/error-permission-denied-publickey/&quot;&gt;GitHub Help - Error Permission denied (publickey)&lt;/a&gt;&lt;/p&gt;

&lt;p id=&quot;3&quot;&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;3使用jekyll搭建博客系统-1&quot;&gt;3.使用Jekyll搭建博客系统&lt;/h2&gt;

&lt;p&gt;这里仅以MAC下的OSX系统为例,Jekyll是用ruby开发的，所以安装Jekyll之前需要执行下面的命令安装一些依赖。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install ruby ruby1.9.1-dev nodejs

sudo gem install jekyll
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;至此，你的MAC电脑上已经安装并配置了搭建博客需要的所有的依赖环境。&lt;/p&gt;

&lt;p&gt;去&lt;a href=&quot;http://jekyllthemes.org&quot;&gt;jekyllthemes&lt;/a&gt; 或者&lt;a href=&quot;https://www.zhihu.com/question/20223939&quot;&gt;知乎&lt;/a&gt;挑选一个Jekyll主题，并按照主题的README进行CLONE安装即可。&lt;/p&gt;

&lt;p&gt;以本站为例，我选用了&lt;a href=&quot;https://github.com/Huxpro&quot;&gt;Huang Xuan&lt;/a&gt;原创的&lt;a href=&quot;https://github.com/Huxpro/huxpro.github.io&quot;&gt;Jekyll主题&lt;/a&gt;，主题文档里有中英文的README，十分清晰可靠，强烈推荐。&lt;/p&gt;

&lt;p&gt;其他常见问题和基础知识可参见&lt;a href=&quot;http://jekyll.com.cn&quot;&gt;Jekyll官网&lt;/a&gt; ，有中文文档，也十分清晰可靠，强烈推荐。&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;后记&quot;&gt;后记&lt;/h1&gt;

&lt;p&gt;配置的过程中遇到了不少坑，毕竟不是码农，git从零入手，遇到了merge、fetch各种branch傻傻分不清楚。几度几乎放弃，缺总是被一丝丝的曙光召唤着继续坑自己。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关于Git基础知识&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;此处强烈推荐&lt;a href=&quot;https://github.com/geeeeeeeeek&quot;&gt;geeeeeeeeek-童仲毅&lt;/a&gt;的&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki&quot;&gt;Git 中文教程&lt;/a&gt;悉心细读，获益匪浅。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;本地调试环境需要 &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install jekyll&lt;/code&gt;，结果 rubygem 的源居然被墙了……后来手动改成了我大淘宝的镜像源才成功&lt;/p&gt;

&lt;p&gt;Theme 的 CSS 是基于 Bootstrap 定制的，看得不爽的地方直接在 Less 里改就好了。&lt;/p&gt;

&lt;p&gt;最后就进入了耗时反而最长的&lt;strong&gt;做图、写字&lt;/strong&gt;阶段，也算是进入了&lt;strong&gt;写博客&lt;/strong&gt;的正轨，因为是类似 Hack Day 的方式去搭这个站的，所以折腾折腾着大半夜就过去了。&lt;/p&gt;

&lt;p&gt;第二天考虑中文字体的渲染，fork 了 &lt;a href=&quot;http://www.typeisbeautiful.com/&quot;&gt;Type is Beautiful&lt;/a&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;font&lt;/code&gt; CSS，调整了字号，适配了 Win 的渣渲染，中英文混排效果好多了。&lt;/p&gt;

&lt;p&gt;回顾这个博客的诞生，纯粹是出于个人兴趣。&lt;/p&gt;

&lt;p&gt;我不是程序猿，也不是Github的重度用户，只是在找一些产品源码的时候偶遇了GitPages，前几次的碰壁愈发激起了我要攻克他的信念。&lt;/p&gt;

&lt;p&gt;今日终于&lt;/p&gt;

&lt;p&gt;跑起来了&lt;/p&gt;

&lt;p&gt;—— 龟龟 后记于 2017.02&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;img src=&quot;http://image.lawootrip.com/0%20%2837%29.gif&quot; /&gt; &lt;/td&gt;
&lt;td&gt;
&lt;img src=&quot;http://image.lawootrip.com/1490878210.png&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;table&gt;

&lt;div&gt;&lt;small class=&quot;img-hint&quot;&gt;这不是收钱的  加个好友而已&lt;/small&gt;&lt;/div&gt;

&lt;/table&gt;
</description>
        <pubDate>Wed, 15 Feb 2017 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2017/02/15/hello-2017.markup/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/15/hello-2017.markup/</guid>
        
        <category>生活</category>
        
        
      </item>
    
  </channel>
</rss>
